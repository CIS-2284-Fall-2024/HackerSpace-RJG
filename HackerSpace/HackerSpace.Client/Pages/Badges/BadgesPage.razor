@page "/badges"
@rendermode InteractiveWebAssembly
@attribute [StreamRendering]
@inject IBadgesDAL dal
@inject NavigationManager nav
@inject PersistentComponentState appState
@implements IDisposable

<h3>BadgesPage</h3>

@if (_badges == null)
{
    <img src="/images/spur_gears_animation.gif" />
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Description</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
        @foreach (var badge in _badges)
        {
            <tr>
                <td>@badge.Title </td>
                <td>@badge.Description</td>
                <td>
                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="(() => OnEditBadgeClick(badge))">Edit</button>
                </td>
                <td>
                    <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(()=> OnDeleteBadgeClickAsync(badge))">Delete</button>
                </td>
            </tr>
        }
    </table>
    <button type="button" class="btn btn-primary" @onclick="OnAddBadgeClick">Add Badge</button>
}
@code {
    private PersistingComponentStateSubscription _subscription;

    private List<Badge>? _badges;

    protected async override Task OnInitializedAsync()
    {
        _subscription = appState.RegisterOnPersisting(PersistAsync);

        var foundInState = appState.TryTakeFromJson<List<Badge>>("badges", out List<Badge>? badges);

        _badges = foundInState 
            ? badges
            : await dal.GetAllAsync();
    }

    private Task PersistAsync()
    {
        appState.PersistAsJson("badges", _badges);
        return Task.CompletedTask;
    }

    protected void OnAddBadgeClick()
    {
        nav.NavigateTo("badge");
    }

    protected void OnEditBadgeClick(Badge badge)
    {
        nav.NavigateTo($"badge/{badge.Id}");
    }

    protected async Task OnDeleteBadgeClickAsync(Badge badge)
    {
        _badges?.Remove(badge);
        await dal.DeleteAsync(badge.Id);
    }

    public void Dispose()
    {
        _subscription.Dispose();
    }
}
