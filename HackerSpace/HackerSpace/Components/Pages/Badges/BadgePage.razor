@page "/badge"
@page "/badge/{Id}"

@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IBadgesDAL dal
@inject NavigationManager nav

<h3>Badge Page</h3>
@if (badge == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="badge">
        <div>
            <label>
                Title:
                <InputText @bind-Value="badge.Title" />
            </label>
        </div>
        <div>
            <label>
                Description:
                <InputText @bind-Value="badge.Description" />
            </label>
        </div>
        <div>
            <label>
                Task:
                <InputText @bind-Value="badge.Task" />
            </label>
        </div>
        <div>
            <label>
                Turn in Instructions:
                <InputText @bind-Value="badge.TurninInstructions" />
            </label>
        </div>
        <button type="button" class="btn btn-primary" @onclick="OnSubmitClickAsync">Submit</button>
    </EditForm>
}
<button type="button" class="btn btn-caution" @onclick="OnCancelClick">Cancel</button>

<p>
    @message
</p>
@code {

    [Parameter]
    public string? Id { get; set; }

    private string? message;
    private Badge? badge;

    protected override async Task OnInitializedAsync()
    {
        if(Id== null)
        {
            //create new badge
            badge = new Badge();
        }
        else
        {
            //edit existing badge
            //get existing badge from db
            Guid guid;
            if (Guid.TryParse(Id, out guid))
            {
                badge = await dal.GetBadgeAsync(guid);
            }
            else
            {
                //TODO: address error
            }
        }
    }

    protected async Task OnSubmitClickAsync()
    {
        if(badge?.Id == Guid.Empty)
        {
            //New Badge so add it
            await dal.AddAsync(badge);
        }
        else
        {
            //Updating an existing badge
            await dal.UpdateAsync(badge);
        }
        nav.NavigateTo("badges");
    }

    protected void OnCancelClick()
    {
        nav.NavigateTo("badges");
    }
}
